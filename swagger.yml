openapi: 3.0.3
info:
  title: ScreenSpace - OpenAPI 3.0
  description: |-
    This is the ScreenSpace Server endpoints documentation with which the mobile application will interact with in order to perform its required functions.
  contact:
    email: testuade1@gmail.com
  version: 0.0.0
servers:
  - url: https://petstore3.swagger.io/api/v3
tags:
  - name: user
    description: Application user management
  - name: auth
    description: User access management
  - name: theatre
    description: Movie theatre management
paths:
  /api/v1/users:
    post:
      tags:
        - user
      summary: Create a new owner user
      description: Creates a new movie theatre owner with the email and password provided.
      operationId: createOwner
      requestBody:
        description: Created user object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewUser'
      responses:
        '201':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NewUserCreated'
        '409':
          description: User already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NewUserCreated'
        '500':
          description: Server error while processing the request
    get:
      tags:
        - user
      summary: Get all users
      description: Retrieves a list of all users.
      operationId: getUsers
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        '404':
          description: Users not found      
        '500':
          description: Server error while processing the request 
  /api/v1/users/{userId}:
    get:
      tags:
        - user
      summary: Get user by ID
      description: Retrieves a specific user by their ID.
      operationId: getUserById
      parameters:
        - name: userId
          in: path
          description: ID of the user to retrieve.
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: User not found.
        '500':
          description: Server error while processing the request
    delete:
      tags:
        - user
      summary: Delete user by ID
      description: Deletes a specific user by their ID.
      operationId: deleteUserById
      parameters:
        - name: userId
          in: path
          description: ID of the user to delete.
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '204':
          description: The user has been successfully deleted
        '404':
          description: User not found.
        '500':
          description: Server error while processing the request   
  /api/v1/users/{userId}/profile:
    put:
      tags:
        - user
      summary: Update user profile
      description: Allows a user to edit their name and profile photo.
      operationId: updateUserProfile
      parameters:
        - name: userId
          in: path
          description: ID of user that needs to complete their profile.
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: Optional parameters to modify user information.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserProfileRequest'
      responses:
        '204':
          description: The user's profile has been successfully updated
        '400':
          description: Bad request
        '404':
          description: User not found.
        '500':
          description: Server error while processing the request
  /api/v1/auths/owners:
    post:
      tags:
        - auth
      summary: User login
      description: Owner login with the credentials provided.
      operationId: ownerLogin
      requestBody:
        description: User authentication using provided credentials
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OwnerLoginRequest'
      responses:
        '200':
          description: User succesfully retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OwnerLoginResponse'
        '400':
          description: Bad request
        '404':
          description: User not found
        '500':
          description: Server error while processing the request
    put:
      tags:
        - auth
      summary: Token refresh for provided user
      description: Refresh the token provided
      operationId: ownerRefreshToken
      requestBody:
        description: User authentication using provided credentials
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RefreshTokenRequest'
      responses:
        '200':
          description: Token refreshed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RefreshTokenResponse'
        '400':
          description: Bad request
        '404':
          description: Refresh token not found
        '500':
          description: Server error while processing the request
  /api/v1/auths/owners/{ownerId}:
    delete:
      tags:
        - auth
      summary: User logout
      description: Owner logout
      operationId: ownerLogout
      parameters:
        - name: ownerId
          in: path
          description: ID of owner thats needs to be logged out
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: User successfully logged out
        '400':
          description: Bad request
        '500':
          description: Server error while processing the request
  /api/v1/auths/login-google:
    post:
      tags:
        - auth
      summary: Login with Google
      description: Logs in a user with their Google account
      operationId: loginWithGoogle
      requestBody:
        description: The user's Google ID token.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginGoogleRequest'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginGoogleResponse'
        '400':
          description: Bad request
        '401':
          description: Authentication failed.
        '500':
          description: Server error while processing the request
  /api/v1/auths/register-google:
    post:
      tags:
        - auth
      summary: Register with Google
      description: Register a user with their Google account
      operationId: registerWithGoogle
      requestBody:
        description: The user's Google ID token.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterGoogleRequest'
      responses:
        '201':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RegisterGoogleResponse'
        '400':
          description: Bad request
        '500':
          description: Server error while processing the request
  /api/v1/auths/logout-google/{userId}:
    delete:
      tags:
        - auth
      summary: Logout with Google
      description:  Logout a user with their Google account
      operationId: userLogout
      parameters:
        - name: userId
          in: path
          description: ID of the user who needs to be logged out with his google account
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '204':
          description: User successfully logged out
        '400':
          description: Bad request
        '404':
          description: User not found
        '500':
          description: Server error while processing the request
  /api/v1/theatres/owners/{ownerId}:
    post:
      tags:
        - theatre
      summary: Create a new movie theatre
      description: Creates a new movie theatre for the specified owner
      operationId: theatreCreate
      parameters:
        - name: ownerId
          in: path
          description: ID of owner thats owns the movie theatre
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: Movie theatre basic information
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MovieTheatreCreateRequest'
      responses:
        '201':
          description: Movie theatre successfully created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MovieTheatreCreateResponse'
        '400':
          description: Bad request
        '500':
          description: Server error while processing the request
  /api/v1/theatres/{theatreId}/halls:
    post:
      tags:
        - theatre
      summary: Create a new movie theatre
      description: Creates a new hall for a movie theatre
      operationId: theatreHallCreate
      parameters:
        - name: theatreId
          in: path
          description: ID of theatre that contains the hall
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: Hall details
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MovieTheatreHallCreateRequest'
      responses:
        '201':
          description: Movie theatre hall successfully created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MovieTheatreHallCreateResponse'
        '400':
          description: Bad request
        '500':
          description: Server error while processing the request
  /api/v1/theatres/{theatreId}/halls/{hallId}/shows:
    post:
      tags:
        - theatre
      summary: Create a show in a movie hall
      description: Creates a new show for specified hall
      operationId: theatreHallShowCreate
      parameters:
        - name: theatreId
          in: path
          description: ID of theatre that contains the hall
          required: true
          schema:
            type: integer
            format: int64
        - name: hallId
          in: path
          description: ID of theatre that contains the hall
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: Hall details
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MovieTheatreHallShowCreateRequest'
      responses:
        '201':
          description: Movie theatre hall successfully created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MovieTheatreHallShowCreateResponse'
        '400':
          description: Bad request
        '500':
          description: Server error while processing the request
  
components:
  schemas:
    Address:
      type: object
      properties:
        street:
          type: string
          example: 437 Lytton
        city:
          type: string
          example: Palo Alto
        state:
          type: string
          example: CA
        zip:
          type: string
          example: '94301'
      xml:
        name: address
    Category:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        name:
          type: string
          example: Dogs
      xml:
        name: category
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        username:
          type: string
          example: theUser
        firstName:
          type: string
          example: John
        lastName:
          type: string
          example: James
        email:
          type: string
          example: john@email.com
        password:
          type: string
          example: '12345'
        phone:
          type: string
          example: '12345'
        userStatus:
          type: integer
          description: User Status
          format: int32
          example: 1
      xml:
        name: user
    NewUser:
      type: object
      properties:
        email:
          type: string
          example: john@email.com
        password:
          type: string
          example: '12345'
    NewUserCreated:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        email:
          type: string
          example: john@email.com
        password:
          type: string
          example: '12345'
    OwnerLoginRequest:
      type: object
      properties:
        email:
          type: string
          example: john@email.com
        password:
          type: string
          example: '12345'
    OwnerLoginResponse:
      type: object
      properties:
        email:
          type: string
          example: john@email.com
        password:
          type: string
          example: '12345'
    RefreshTokenRequest:
      type: object
      properties:
        refreshToken:
          type: string
          example: 'Refresh token'
    RefreshTokenResponse:
      type: object
      properties:
        refreshToken:
          type: string
          example: 'sdasdasdasd'
        token:
          type: string
          example: 'New Token'
    MovieTheatreCreateRequest:
      type: object
      properties:
        name:
          type: string
          example: 'Cinemark Belgrano'
        calle:
          type: string
          example: 'New Token'
        numero:
          type: integer
          format: int64
          example: 10
        barrio:
          type: string
          example: 'New Token'
        localidad:
          type: string
          example: 'New Token'
        provincia:
          type: string
          example: 'New Token'
        pais:
          type: string
          example: 'New Token'
    MovieTheatreCreateResponse:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        name:
          type: string
          example: 'Cinemark Belgrano'
        calle:
          type: string
          example: 'New Token'
        numero:
          type: integer
          format: int64
          example: 10
        barrio:
          type: string
          example: 'New Token'
        localidad:
          type: string
          example: 'New Token'
        provincia:
          type: string
          example: 'New Token'
        pais:
          type: string
          example: 'New Token'
    MovieTheatreHallCreateRequest:
      type: object
      properties:
        name:
          type: string
          example: 'Hall Name'
        width:
          type: integer
          format: int64
          example: 20
        height:
          type: integer
          format: int64
          example: 30
    MovieTheatreHallCreateResponse:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        name:
          type: string
          example: 'Hall Name'
        width:
          type: integer
          format: int64
          example: 20
        height:
          type: integer
          format: int64
          example: 30
    MovieTheatreHallShowCreateRequest:
      type: object
      properties:
        showId:
          type: integer
          format: int64
          example: 666
        name:
          type: string
          example: 'Show name'
        timetable:
          type: integer
          format: date-time
          example: "2023-12-20T10:00:00Z"
    MovieTheatreHallShowCreateResponse:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        showId:
          type: integer
          format: int64
          example: 666
        name:
          type: string
          example: 'Show name'
        timetable:
          type: integer
          format: date-time
          example: "2023-12-20T10:00:00Z"
    LoginGoogleRequest:
      type: object
      properties:
        tokenGoogle:
          type: string
          description: The user's Google ID token.
    LoginGoogleResponse:
      type: object
      properties:
        tokenJWT:
          type: string
          example : eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQSflxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQsswc
          description: Access token.
    RegisterGoogleRequest:
      type: object
      properties:
        tokenGoogle:
          type: string
          description: The user's Google ID token.
          example: F3498F437FEH7F3JA
    RegisterGoogleResponse:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 124
        email:
          type: string
          example: LeoMessi@gmail.com
    UserProfileRequest:
      type: object
      properties:
        name:
          type: string
          example: Leo messi
        avatar:
          type: string
          example: www.imageExample.com/ndasud72363

    Tag:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
      xml:
        name: tag
    ApiResponse:
      type: object
      properties:
        code:
          type: integer
          format: int32
        type:
          type: string
        message:
          type: string
      xml:
        name: '##default'
  requestBodies:
    UserArray:
      description: List of user object
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/User'
  securitySchemes:
    petstore_auth:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: https://petstore3.swagger.io/oauth/authorize
          scopes:
            write:pets: modify pets in your account
            read:pets: read your pets
    api_key:
      type: apiKey
      name: api_key
      in: header