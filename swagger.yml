openapi: 3.0.3
info:
  title: ScreenSpace - OpenAPI 3.0
  description: |-
    This is the ScreenSpace Server endpoints documentation with which the mobile application will interact with in order to perform its required functions.
  contact:
    email: testuade1@gmail.com
  version: 0.0.1
servers:
  # Added by API Auto Mocking Plugin
  - description: SwaggerHub API Auto Mocking
    url: https://virtserver.swaggerhub.com/ivanchan194/ScreenSpace/0.0.1
  - url: https://ScreenSpace.swagger.io/api/v1
tags:
  - name: user
    description: Application user management
  - name: auth
    description: User access management
  - name: cinema
    description: Movie cinema management
  - name: movie
    description: Movies
paths:
  /users:
    post:
      tags:
        - user
      summary: Create a new user
      description: Creates a new user with the email and password provided.
      operationId: createUser
      requestBody:
        description: Created user object
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/NewUser"
      responses:
        "201":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NewUserCreated"     
        "401":
          description: Unauthorized - Invalid or expired token
        "403":
          description: Forbidden - User not authorized
        "409":
          description: User already exists
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NewUserCreated"
        "500":
          description: Server error while processing the request
  /users/{userId}:
    delete:
      tags:
        - user
      summary: Delete user by ID
      description: Deletes a specific user by their ID.
      operationId: deleteUserById
      parameters:
        - name: userId
          in: path
          description: ID of the user to delete.
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "204":
          description: The user has been successfully deleted
        "400":
          description: Bad request
        "401":
          description: Unauthorized - Invalid or expired token
        "403":
          description: Forbidden - User not authorized
        "404":
          description: User not found
        "500":
          description: Server error while processing the request
  /users/{userId}/profile:
    put:
      tags:
        - user
      summary: Update user profile
      description: Allows a user to edit their name and profile photo.
      operationId: updateUserProfile
      parameters:
        - name: userId
          in: path
          description: ID of user that needs to complete their profile.
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: Optional parameters to modify user information.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserProfileRequest"
      responses:
        "204":
          description: The user's profile has been successfully updated
        "400":
          description: Bad request
        "401":
          description: Unauthorized - Invalid or expired token
        "403":
          description: Forbidden - User not authorized
        "404":
          description: User not found
        "500":
          description: Server error while processing the request

  /auths/login:
    post:
      tags:
        - auth
      summary: User login
      description: User login with the credentials provided.
      operationId: userLogin
      requestBody:
        description: User authentication using provided credentials
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserLoginRequest"
      responses:
        "200":
          description: User succesfully retrieved
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserLoginResponse"
        "400":
          description: Bad request
        "404":
          description: User not found
        "500":
          description: Server error while processing the request

  /auths/refresh-token:
    post:
      tags:
        - auth
      summary: Refresh user token
      description: Refresh user token using an expired token.
      operationId: refreshUserToken
      requestBody:
        description: JSON object containing expired token.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RefreshTokenRequest"
      responses:
        "200":
          description: Successfully refreshed token
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RefreshTokenResponse"
        "400":
          description: Bad request
        "404":
          description: Refresh token not found
        "500":
          description: Server error while processing the request
  /auths/logout/{userId}:
    delete:
      tags:
        - auth
      summary: User logout
      description: User logout
      operationId: userLogout
      parameters:
        - name: userId
          in: path
          description: ID of user thats needs to be logged out
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: User successfully logged out
        "400":
          description: Bad request
        "401":
          description: Unauthorized - Invalid or expired token
        "403":
          description: Forbidden - User not authorized
        "404":
          description: User not found
        "500":
          description: Server error while processing the request
  /auths/reset-password:
    post:
      tags:
        - auth
      summary: Request a password reset
      description: Sends an email to the user with a verification code to reset their password.
      operationId: requestPasswordReset
      requestBody:
        description: User email address for password reset request
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  description: User email address
                  example: example@example.com
      responses:
        "200":
          description: Verification code sent to user's email
        "400":
          description: Bad request
        "404":
          description: User not found
        "500":
          description: Server error while processing the request
  /auths/verify-reset-code:
    post:
      tags:
        - auth
      summary: Verify password reset code
      description: Verifies if the verification code sent to the user for password reset is correct.
      operationId: verifyPasswordResetCode
      requestBody:
        description: Verification code
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  example: leoMessi@gmail.com
                verificationCode:
                  type: string
                  description: Verification code sent to user's email
                  example: 123456
      responses:
        "200":
          description: Verification code is correct
        "400":
          description: Bad request
        "409":
          description: Incorrect verification code
        "500":
          description: Server error while processing the request
  /auths/new-password:
    post:
      tags:
        - auth
      summary: Set a new password
      description: Set new password for user after verifying email and verification code.
      operationId: setNewPassword
      requestBody:
        description: New password
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  description: User's email
                  example: Messi@example.com
                newPassword:
                  type: string
                  description: User's new password
                  example: examplenewpassword123
      responses:
        "200":
          description: Password reset successfully
        "400":
          description: Bad request
        "404":
          description: User not found 
        "500":
          description: Server error while processing the request
  /cinemas:
    get:
      tags:
        - cinema
      summary: Retrieve all cinemas
      description: Gets all cinemas available
      operationId: cinemaGet
      parameters:
        - name: movieId
          in: query
          description: Filter cinema by movie id
          required: false
          schema:
            type: integer
        - name: userId
          in: query
          description: Filter cinema by owner
          required: false
          schema:
            type: integer
      responses:
        "200":
          description: cinemas successfully retrieved
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/cinemas"
        "401":
          description: Unauthorized - Invalid or expired token
        "403":
          description: Forbidden - User not authorized
        "500":
          description: Server error
    put:
      tags:
        - cinema
      summary: Update cinema information
      description: The 'id' attribute is required to identify the cinema to update, while all other attributes are optional.
      operationId: cinemaUpdate
      requestBody:
        description: Cinema information to be updated
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/cinemas"
      responses:
        "200":
          description: Cinema information updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/cinemas"
        "400":
          description: Bad request
        "401":
          description: Unauthorized - Invalid or expired token
        "403":
          description: Forbidden - User not authorized
        "404":
          description: Cinema not found
        "500":
          description: Server error while processing the request  
  /cinemas/{cinemaId}:
    get:
      tags:
        - cinema
      summary: Retrieve one cinema by its ID
      description: Gets one cinema information by its ID
      operationId: cinemaGetById
      parameters:
        - name: cinemaId
          in: path
          description: ID of the cinema
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: cinema successfully retrieved
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/cinema"
        "401":
          description: Unauthorized - Invalid or expired token
        "403":
          description: Forbidden - User not authorized
        "404":
          description: Cinema not found
        "500":
          description: Server error
    delete:
      tags:
        - cinema
      summary: Delete one cinema by its ID
      description: Delete one cinema information by its ID
      operationId: cinemaDeleteById
      parameters:
        - name: cinemaId
          in: path
          description: ID of the cinema
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: Information of the deleted cinema
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/cinema"
        "400":
          description: Bad request
        "401":
          description: Unauthorized - Invalid or expired token
        "403":
          description: Forbidden - User not authorized
        "500":
          description: Server error
  /cinemas/users:
    post:
      tags:
        - cinema
      summary: Create a new movie cinema
      description: Creates a new movie cinema for the specified user
      operationId: cinemaCreate
      requestBody:
        description: Movie cinema basic information
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/MoviecinemaCreateRequest"
      responses:
        "201":
          description: Movie cinema successfully created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MoviecinemaCreateResponse"
        "400":
          description: Bad request
        "401":
          description: Unauthorized - Invalid or expired token
        "403":
          description: Forbidden - User not authorized
        "500":
          description: Server error while processing the request
  /cinemas/{cinemaId}/halls:
    post:
      tags:
        - cinema
      summary: Adds new cinema hall
      description: Creates a new hall for a movie cinema
      operationId: cinemaHallCreate
      parameters:
        - name: cinemaId
          in: path
          description: ID of cinema that contains the hall
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: Hall details
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/MoviecinemaHallCreateRequest"
      responses:
        "201":
          description: Movie cinema hall successfully created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MoviecinemaHallCreateResponse"
        "400":
          description: Bad request
        "401":
          description: Unauthorized - Invalid or expired token
        "403":
          description: Forbidden - User not authorized
        "500":
          description: Server error while processing the request
    put:
      tags:
        - cinema
      summary: Updates a cinema hall
      description: Updates a hall for a movie cinema
      operationId: cinemaHallUpdate
      parameters:
        - name: cinemaId
          in: path
          description: ID of cinema that contains the hall
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: Hall details
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/MoviecinemaHallCreateRequest"
      responses:
        "201":
          description: Movie cinema hall successfully created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MoviecinemaHallCreateResponse"
        "400":
          description: Bad request
        "401":
          description: Unauthorized - Invalid or expired token
        "403":
          description: Forbidden - User not authorized
        "404":
          description: Cinema hall not found
        "500":
          description: Server error while processing the request
  /cinemas/{cinemaId}/halls/{hallId}:
    delete:
      tags:
        - cinema
      summary: Delete hall by ID
      description: Deletes a specific hall by their ID.
      operationId: deleteHallById
      parameters:
        - name: cinemaId
          in: path
          description: ID of cinema that contains the hall
          required: true
          schema:
            type: integer
            format: int64
        - name: hallId
          in: path
          description: ID of the hall to delete.
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "204":
          description: The hall has been successfully deleted
        "400":
          description: Bad request
        "401":
          description: Unauthorized - Invalid or expired token
        "403":
          description: Forbidden - User not authorized
        "404":
          description: User not found
        "500":
          description: Server error while processing the request
  /cinemas/{cinemaId}/halls/{hallId}/shows:
    post:
      tags:
        - cinema
      summary: Create a show in a movie hall
      description: Creates a new show for specified hall
      operationId: cinemaHallShowCreate
      parameters:
        - name: cinemaId
          in: path
          description: ID of cinema that contains the hall
          required: true
          schema:
            type: integer
            format: int64
        - name: hallId
          in: path
          description: ID of cinema that contains the hall
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: Hall details
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/MoviecinemaHallShowCreateRequest"
      responses:
        "201":
          description: Movie cinema hall successfully created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MoviecinemaHallShowCreateResponse"
        "400":
          description: Bad request
        "401":
          description: Unauthorized - Invalid or expired token

        "403":
          description: Forbidden - User not authorized
        "500":
          description: Server error while processing the request
  /movies:
    get:
      tags:
        - movie
      summary: Get all movies
      description: Retrieves a list of all movies.
      operationId: getMovies
      parameters:
        - name: cinema
          in: query
          description: Filter movies by cinema
          required: false
          schema:
            type: string
        - name: latitude
          in: query
          description: Filter movies by distance from user location
          required: false
          schema:
            type: number
        - name: longitude
          in: query
          description: Filter movies by distance from user location
          required: false
          schema:
            type: number
        - name: title
          in: query
          description: Filter movies by title
          required: false
          schema:
            type: string
        - name: genre
          in: query
          description: Filter movies by genre
          required: false
          schema:
            type: string
        - name: rating
          in: query
          description: Filter movies by rating
          required: false
          schema:
            type: number
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Movie"
        "404":
          description: Movies not found.
        "401":
          description: Unauthorized - Invalid or expired token
        "403":
          description: Forbidden - User not authorized
        "500":
          description: Server error while processing the request
  /movies/{movieId}/review:
    post:
      tags:
        - movie
      summary: Create a movie review
      description: Allows users to submit a review for a specific movie.
      operationId: reviewMovie
      parameters:
        - name: movieId
          in: path
          description: ID of the movie
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: Created review object
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ReviewMovieRequest"
      responses:
        "201":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ReviewMovie"
        "400":
          description: User not found
        "401":
          description: Unauthorized - Invalid or expired token
        "403":
          description: Forbidden - User not authorized
        "404":
          description: Bad request
        "500":
          description: Server error while processing the request
  /movies/{movieId}:
    get:
      tags:
        - movie
      summary: Get movie by ID
      description: Retrieves a specific movie by its ID.
      operationId: getMovieById
      parameters:
        - name: movieId
          in: path
          description: ID of the movie to retrieve.
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MovieDetail"
        "401":
          description: Unauthorized - Invalid or expired token
        "403":
          description: Forbidden - User not authorized
        "404":
          description: Movie not found.
        "500":
          description: Server error while processing the request
  /movies/genres:
    get:
      tags:
        - movie
      summary: Get all movie genres
      description: Retrieves a list of all movie genres.
      operationId: getMovieGenres
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
              example: ["terror", "comedy", "drama"]
        "401":
          description: Unauthorized - Invalid or expired token
        "403":
          description: Forbidden - User not authorized
        "404":
          description: Genres not found.
        "500":
          description: Server error while processing the request
  /booking:
    get:
      tags:
        - bookings
      summary: Get all bookings by userId
      description: Retrieves a list of all existing bookings.
      operationId: getBookings
      parameters:
        - name: userId
          in: query
          description: Filter bookings by user id
          required: false
          schema:
            type: integer
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Booking"
        "401":
          description: Unauthorized - Invalid or expired token
        "403":
          description: Forbidden - User not authorized
        "404":
          description: Bookings not found.
        "500":
          description: Server error while processing the request
    post:
      tags:
        - bookings
      summary: Create a new booking
      description: Creates a new booking for a movie theater show.
      operationId: createBooking
      requestBody:
        description: Details of the booking to be created.
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/BookingRequest"
      responses:
        "201":
          description: Booking created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Booking"
        "400":
          description: Invalid input parameters
        "401":
          description: Unauthorized - Invalid or expired token
        "403":
          description: Forbidden - User not authorized
        "404":
          description: Movie show or cinema hall not found
        "409":
          description: Seats are not available
        "500":
          description: Server error while processing the request
components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        username:
          type: string
          example: theUser
        firstName:
          type: string
          example: John
        lastName:
          type: string
          example: James
        email:
          type: string
          example: john@email.com
        password:
          type: string
          example: "12345"
        phone:
          type: string
          example: "12345"
        userStatus:
          type: integer
          description: User Status
          format: int32
          example: 1
        avatar:
          type: string
          example: "https://example.com/images/the_godfather.jpg"
      xml:
        name: user
    NewUser:
      type: object
      properties:
        email:
          type: string
          example: john@email.com
        password:
          type: string
          example: "12345"
    NewUserCreated:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        email:
          type: string
          example: john@email.com
        password:
          type: string
          example: "12345"
    UserLoginRequest:
      type: object
      properties:
        email:
          type: string
          example: john@email.com
          nullable: true
          default: null
        password:
          type: string
          example: "12345"
        tokenGoogle:
          type: string
          description: The user's Google ID token.
    UserLoginResponse:
      type: object
      properties:
        accessToken:
          type: string
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQSflxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQsswc
          description: Access token.
        refreshToken:
          type: string
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyLCJleHAiOjE1MTYyMzkwMjJ9.6rN5MWI10r6CV7vK8gAlYk-5NnST1MgOfv6n8K6lR9g
          description: Refresh token.
        user:
          $ref: "#/components/schemas/User"
    RefreshTokenRequest:
      type: object
      properties:
        accessToken:
          type: string
          example: "Access token"
        refreshToken:
          type: string
          example: "Refresh token"
    RefreshTokenResponse:
      type: object
      properties:
        refreshToken:
          type: string
          example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyLCJleHAiOjE1MTYyMzkwMjJ9.6rN5MWI10r6CV7vK8gAlYk-5NnST1MgOfv6n8K6lR"
    MoviecinemaCreateRequest:
      type: object
      properties:
        userId:
          type: integer
          example: 120
        name:
          type: string
          example: "Cinemark Belgrano"
        company:
          type: string
          example: "Hoyts"
        calle:
          type: string
          example: "New Token"
        numero:
          type: integer
          format: int64
          example: 10
        barrio:
          type: string
          example: "New Token"
        localidad:
          type: string
          example: "New Token"
        provincia:
          type: string
          example: "New Token"
        pais:
          type: string
          example: "New Token"
        latitude:
          type: string
          example: 41°24'12.2"N
        longitude:
          type: string
          example: 2°10'26.5"E
        seatCost:
          type: integer
          format: int64
          example: 200
        available:
          type: boolean
          example : True
    MoviecinemaCreateResponse:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        name:
          type: string
          example: "Cinemark Belgrano"
        calle:
          type: string
          example: "Mendoza"
        numero:
          type: integer
          format: int64
          example: 10
        barrio:
          type: string
          example: "Caballito"
        localidad:
          type: string
          example: "CABA"
        provincia:
          type: string
          example: "Buenos Aires"
        pais:
          type: string
          example: "Argentina"
    MoviecinemaHallCreateRequest:
      type: object
      properties:
        hallId:
          type: integer
          example: 203
        name:
          type: string
          example: "Hall Name"
        width:
          type: integer
          format: int64
          example: 20
        height:
          type: integer
          format: int64
          example: 30
        available:
          type: boolean
          example: true
    MoviecinemaHallCreateResponse:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        name:
          type: string
          example: "Hall Name"
        width:
          type: integer
          format: int64
          example: 20
        height:
          type: integer
          format: int64
          example: 30
    MoviecinemaHallShowCreateRequest:
      type: object
      properties:
        movieId:
          type: integer
          format: int64
          example: 666
        timetable:
          type: integer
          format: date-time
          example: "2023-12-20T10:00:00Z"
    MoviecinemaHallShowCreateResponse:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        showId:
          type: integer
          format: int64
          example: 666
        name:
          type: string
          example: "Show name"
        timetable:
          type: integer
          format: date-time
          example: "2023-12-20T10:00:00Z"
    UserProfileRequest:
      type: object
      properties:
        name:
          type: string
          example: Leo messi
        avatar:
          type: string
          example: www.imageExample.com/ndasud72363
    cinema:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        name:
          type: string
          example: "Cinemark Belgrano"
        calle:
          type: string
          example: "Mendoza"
        numero:
          type: integer
          format: int64
          example: 10
        barrio:
          type: string
          example: "Caballito"
        localidad:
          type: string
          example: "CABA"
        provincia:
          type: string
          example: "Buenos Aires"
        pais:
          type: string
          example: "Argentina"
        halls:
          type: array
          items: 
            $ref: "#/components/schemas/hall"
    hall:
      type: object
      properties:
        height:
          type: integer
          example: 30
        lenght:
          type: integer
          example: 20
        available:
          type: boolean
          example: true
        shows:
          type: array
          items:
            $ref: "#/components/schemas/show"
    show:
      type: object
      properties:
        movieId:
          type: integer
          example: 10
        datetime:
          type: string
          format: datetime
          example: 2017-07-21T17:32:28Z
        availableSeats:
          type: array
          items:
            type: string
            example: 
              - "A1"
              - "B2"
              - "C3"
    cinemas:
      type: array
      items:
        $ref: "#/components/schemas/cinema"
    Movie:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        title:
          type: string
          example: "The Godfather"
        duration:
          type: integer
          format: int64
          example: 240
        image:
          type: string
          example: "https://example.com/images/the_godfather.jpg"
        genre:
          type: string
          example: "Crime, Drama"
        synopsis:
          type: string
          example: "The aging patriarch of an organized crime dynasty transfers control of his clandestine empire to his son."
        rating:
          type: number
          format: float
          example: 9.2
        isShowing:
          type: boolean
          example: true
        releaseDate:
          type: string
          format: date
          example: "1972-03-24"
    MovieDetail:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        title:
          type: string
          example: "The Godfather"
        duration:
          type: integer
          format: int64
          example: 240
        image:
          type: string
          example: "https://example.com/images/the_godfather.jpg"
        genre:
          type: string
          example: "Crime, Drama"
        synopsis:
          type: string
          example: "The aging patriarch of an organized crime dynasty transfers control of his clandestine empire to his son."
        rating:
          type: number
          format: float
          example: 9.2
        isShowing:
          type: boolean
          example: true
        releaseDate:
          type: string
          format: date
          example: "1972-03-24"
        reviews:
          type: array
          items:
            $ref: "#/components/schemas/ReviewMovie"
    ReviewMovieRequest:
      type: object
      properties:
        userId:
          type: integer
          format: int64
          example: 532
        rating:
          type: integer
          example: 7
        comment:
          type: string
          example: "Complex, volatile, ironic and disquieting, Scorsese Goodfellas is a masterly achievement in intense observation."
    ReviewMovie:
      type: object
      properties:
        reviewId:
          type: integer
          format: int64
          example: 52
        userId:
          type: integer
          format: int64
          example: 532
        rating:
          type: integer
          example: 7
        comment:
          type: string
          example: "Complex, volatile, ironic and disquieting, Scorsese Goodfellas is a masterly achievement in intense observation."
    BookingRequest:
      type: object
      properties:
        showId:
          type: integer
          format: int64
          example: 52
        timetable:
          type: string
          format: date-time
          example: "2023-05-21T11:30:00.000Z"
        seats:
          type: array
          items:
            type: string
          example:
            - "A1"
            - "B2"
            - "C3"
    Booking:
      type: object
      properties:
        bookingCode:
          type: string
          example: "BAD56ER"
        movie:
          $ref: "#/components/schemas/Movie"
        hallId:
          type: integer
          format: int64
          example: 52
        timetable:
          type: string
          format: date-time
          example: "2023-05-24T18:30:00.000Z"
        totalPrice:
          type: number
          format: float
          example: 1543.5
        seats:
          type: array
          items:
            type: string
          example:
            - "B1"
            - "B2"
            - "B3"
  requestBodies:
    UserArray:
      description: List of user object
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: "#/components/schemas/User"