openapi: 3.0.3
info:
  title: ScreenSpace - OpenAPI 3.0
  description: |-
    This is the ScreenSpace Server endpoints documentation with which the mobile application will interact with in order to perform its required functions.
  contact:
    email: testuade1@gmail.com
  version: 0.0.0
servers:
  - url: https://ScreenSpace.swagger.io/api/v1
tags:
  - name: user
    description: Application user management
  - name: auth
    description: User access management
  - name: theatre
    description: Movie theatre management
  - name: movie
    description: Movies
paths:
  /api/v1/users:
    post:
      tags:
        - user
      summary: Create a new owner user
      description: Creates a new movie theatre owner with the email and password provided.
      operationId: createOwner
      requestBody:
        description: Created user object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewUser'
      responses:
        '201':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NewUserCreated'
        '409':
          description: User already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NewUserCreated'
        '500':
          description: Server error while processing the request
    get:
      tags:
        - user
      summary: Get all users
      description: Retrieves a list of all users.
      operationId: getUsers
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        '404':
          description: Users not found      
        '500':
          description: Server error while processing the request 
  /api/v1/users/{userId}:
    get:
      tags:
        - user
      summary: Get user by ID
      description: Retrieves a specific user by their ID.
      operationId: getUserById
      parameters:
        - name: userId
          in: path
          description: ID of the user to retrieve.
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: User not found.
        '500':
          description: Server error while processing the request
    delete:
      tags:
        - user
      summary: Delete user by ID
      description: Deletes a specific user by their ID.
      operationId: deleteUserById
      parameters:
        - name: userId
          in: path
          description: ID of the user to delete.
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '204':
          description: The user has been successfully deleted
        '404':
          description: User not found.
        '500':
          description: Server error while processing the request   
  /api/v1/users/{userId}/profile:
    put:
      tags:
        - user
      summary: Update user profile
      description: Allows a user to edit their name and profile photo.
      operationId: updateUserProfile
      parameters:
        - name: userId
          in: path
          description: ID of user that needs to complete their profile.
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: Optional parameters to modify user information.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserProfileRequest'
      responses:
        '204':
          description: The user's profile has been successfully updated
        '400':
          description: Bad request
        '404':
          description: User not found.
        '500':
          description: Server error while processing the request
  /api/v1/auths/owners:
    post:
      tags:
        - auth
      summary: User login
      description: Owner login with the credentials provided.
      operationId: ownerLogin
      requestBody:
        description: User authentication using provided credentials
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OwnerLoginRequest'
      responses:
        '200':
          description: User succesfully retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OwnerLoginResponse'
        '400':
          description: Bad request
        '404':
          description: User not found
        '500':
          description: Server error while processing the request
    put:
      tags:
        - auth
      summary: Token refresh for provided user
      description: Refresh the token provided
      operationId: ownerRefreshToken
      requestBody:
        description: User authentication using provided credentials
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RefreshTokenRequest'
      responses:
        '200':
          description: Token refreshed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RefreshTokenResponse'
        '400':
          description: Bad request
        '404':
          description: Refresh token not found
        '500':
          description: Server error while processing the request
  /api/v1/auths/owners/{ownerId}:
    delete:
      tags:
        - auth
      summary: User logout
      description: Owner logout
      operationId: ownerLogout
      parameters:
        - name: ownerId
          in: path
          description: ID of owner thats needs to be logged out
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: User successfully logged out
        '400':
          description: Bad request
        '500':
          description: Server error while processing the request
  /api/v1/auths/login-google:
    post:
      tags:
        - auth
      summary: Login with Google
      description: Logs in a user with their Google account
      operationId: loginWithGoogle
      requestBody:
        description: The user's Google ID token.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginGoogleRequest'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginGoogleResponse'
        '400':
          description: Bad request
        '401':
          description: Authentication failed.
        '500':
          description: Server error while processing the request
  /api/v1/auths/register-google:
    post:
      tags:
        - auth
      summary: Register with Google
      description: Register a user with their Google account
      operationId: registerWithGoogle
      requestBody:
        description: The user's Google ID token.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterGoogleRequest'
      responses:
        '201':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RegisterGoogleResponse'
        '400':
          description: Bad request
        '500':
          description: Server error while processing the request
  /api/v1/auths/logout-google/{userId}:
    delete:
      tags:
        - auth
      summary: Logout with Google
      description:  Logout a user with their Google account
      operationId: userLogout
      parameters:
        - name: userId
          in: path
          description: ID of the user who needs to be logged out with his google account
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '204':
          description: User successfully logged out
        '400':
          description: Bad request
        '404':
          description: User not found
        '500':
          description: Server error while processing the request
  /api/v1/theatres/owners/{ownerId}:
    post:
      tags:
        - theatre
      summary: Create a new movie theatre
      description: Creates a new movie theatre for the specified owner
      operationId: theatreCreate
      parameters:
        - name: ownerId
          in: path
          description: ID of owner thats owns the movie theatre
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: Movie theatre basic information
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MovieTheatreCreateRequest'
      responses:
        '201':
          description: Movie theatre successfully created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MovieTheatreCreateResponse'
        '400':
          description: Bad request
        '500':
          description: Server error while processing the request
  /api/v1/theatres/{theatreId}/halls:
    post:
      tags:
        - theatre
      summary: Create a new movie theatre
      description: Creates a new hall for a movie theatre
      operationId: theatreHallCreate
      parameters:
        - name: theatreId
          in: path
          description: ID of theatre that contains the hall
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: Hall details
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MovieTheatreHallCreateRequest'
      responses:
        '201':
          description: Movie theatre hall successfully created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MovieTheatreHallCreateResponse'
        '400':
          description: Bad request
        '500':
          description: Server error while processing the request
  /api/v1/theatres/{theatreId}/halls/{hallId}/shows:
    post:
      tags:
        - theatre
      summary: Create a show in a movie hall
      description: Creates a new show for specified hall
      operationId: theatreHallShowCreate
      parameters:
        - name: theatreId
          in: path
          description: ID of theatre that contains the hall
          required: true
          schema:
            type: integer
            format: int64
        - name: hallId
          in: path
          description: ID of theatre that contains the hall
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: Hall details
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MovieTheatreHallShowCreateRequest'
      responses:
        '201':
          description: Movie theatre hall successfully created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MovieTheatreHallShowCreateResponse'
        '400':
          description: Bad request
        '500':
          description: Server error while processing the request
  /api/v1/movies:
    get:
      tags:
        - movie
      summary: Get all movies
      description: Retrieves a list of all movies.
      operationId: getMovies
      parameters:
        - name: theatre
          in: query
          description: Filter movies by theatre
          required: false
          schema:
            type: string
        - name: distance
          in: query
          description: Filter movies by distance from user location
          required: false
          schema:
            type: number
        - name: title
          in: query
          description: Filter movies by title
          required: false
          schema:
            type: string
        - name: genre
          in: query
          description: Filter movies by genre
          required: false
          schema:
            type: string
        - name: rating
          in: query
          description: Filter movies by rating
          required: false
          schema:
            type: number
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Movie'
        '404':
          description: Movies not found.
        '500':
          description: Server error while processing the request 
    post:
      tags:
        - movie
      summary: Create a new movie
      description: Creates a new movie with the details provided.
      operationId: createMovie
      requestBody:
        description: Created movie object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MovieRequest'
      responses:
        '201':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Movie'
        '404':
          description: Bad request
        '500':
          description: Server error while processing the request 
  /api/v1/movies/{movieId}/review:
    post:
      tags:
        - movie
      summary: Create a movie review
      description: Allows users to submit a review for a specific movie.
      operationId: reviewMovie
      parameters:
        - name: movieId
          in: path
          description: ID of the movie
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: Created review object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReviewMovieRequest'
      responses:
        '201':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReviewMovie'
        '400':
          description: User not found        
        '404':
          description: Bad request
        '500':
          description: Server error while processing the request 
  /api/v1/movies/{movieId}:
    get:
      tags:
        - movie
      summary: Get movie by ID
      description: Retrieves a specific movie by its ID.
      operationId: getMovieById
      parameters:
        - name: movieId
          in: path
          description: ID of the movie to retrieve.
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MovieDetail'
        '404':
          description: Movie not found.
        '500':
          description: Server error while processing the request
    put:
      tags:
        - movie
      summary: Update movie by ID
      description: Updates a specific movie by its ID.
      operationId: updateMovieById
      parameters:
        - name: movieId
          in: path
          description: ID of the movie to update.
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: Optional parameters to modify movie information.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MovieRequest'
      responses:
        '200':
          description: The movie has been successfully updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Movie'
        '404':
          description: Movie not found.
        '500':
          description: Server error while processing the request
    delete:
      tags:
        - movie
      summary: Delete movie by ID
      description: Deletes a specific movie by its ID.
      operationId: deleteMovieById
      parameters:
        - name: movieId
          in: path
          description: ID of the movie to delete.
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '204':
          description: The movie has been successfully deleted
        '404':
          description: Movie not found.
        '500':
          description: Server error while processing the request
  /api/v1/booking:
    post:
          tags:
            - bookings
          summary: Create a new booking
          description: Creates a new booking for a movie theater show.
          operationId: createBooking
          requestBody:
            description: Details of the booking to be created.
            required: true
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/BookingRequest'
          responses:
            '201':
              description: Booking created successfully
              content:
                application/json:
                  schema:
                    $ref: '#/components/schemas/Booking'
            '400':
              description: Invalid input parameters
            '404':
              description: Movie show or cinema hall not found
            '409':
              description: Seats are not available
            '500':
              description: Server error while processing the request
  /bookings/{bookingCode}:
    get:
      tags:
        - bookings
      summary: Get booking details by code
      description: Retrieves details of a booking by its unique code.
      operationId: getBookingByCode
      parameters:
        - in: path
          name: bookingCode
          description: Booking code
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Booking'
        '404':
          description: Booking not found
        '500':
          description: Server error while processing the request
    put:
      tags:
        - bookings
      summary: Update booking details
      description: Updates details of a booking by its code.
      operationId: updateBooking
      parameters:
        - in: path
          name: bookingCode
          description: Booking code
          required: true
          schema:
            type: string
      requestBody:
        description: Updated details of the booking
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BookingRequest'
      responses:
        '200':
          description: Booking updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Booking'
        '400':
          description: Invalid input parameters
        '404':
          description: Booking not found
        '409':
          description: Seats are not available
        '500':
          description: Server error while processing the request
    delete:
      tags:
        - bookings
      summary: Delete booking
      description: Deletes a booking by its unique code.
      operationId: deleteBooking
      parameters:
        - in: path
          name: bookingCode
          description: Booking code
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Booking deleted successfully
        '404':
          description: Booking not found
        '500':
          description: Server error while processing the request
components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        username:
          type: string
          example: theUser
        firstName:
          type: string
          example: John
        lastName:
          type: string
          example: James
        email:
          type: string
          example: john@email.com
        password:
          type: string
          example: '12345'
        phone:
          type: string
          example: '12345'
        userStatus:
          type: integer
          description: User Status
          format: int32
          example: 1
      xml:
        name: user
    NewUser:
      type: object
      properties:
        email:
          type: string
          example: john@email.com
        password:
          type: string
          example: '12345'
    NewUserCreated:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        email:
          type: string
          example: john@email.com
        password:
          type: string
          example: '12345'
    OwnerLoginRequest:
      type: object
      properties:
        email:
          type: string
          example: john@email.com
        password:
          type: string
          example: '12345'
    OwnerLoginResponse:
      type: object
      properties:
        email:
          type: string
          example: john@email.com
        password:
          type: string
          example: '12345'
    RefreshTokenRequest:
      type: object
      properties:
        refreshToken:
          type: string
          example: 'Refresh token'
    RefreshTokenResponse:
      type: object
      properties:
        refreshToken:
          type: string
          example: 'sdasdasdasd'
        token:
          type: string
          example: 'New Token'
    MovieTheatreCreateRequest:
      type: object
      properties:
        name:
          type: string
          example: 'Cinemark Belgrano'
        calle:
          type: string
          example: 'New Token'
        numero:
          type: integer
          format: int64
          example: 10
        barrio:
          type: string
          example: 'New Token'
        localidad:
          type: string
          example: 'New Token'
        provincia:
          type: string
          example: 'New Token'
        pais:
          type: string
          example: 'New Token'
    MovieTheatreCreateResponse:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        name:
          type: string
          example: 'Cinemark Belgrano'
        calle:
          type: string
          example: 'New Token'
        numero:
          type: integer
          format: int64
          example: 10
        barrio:
          type: string
          example: 'New Token'
        localidad:
          type: string
          example: 'New Token'
        provincia:
          type: string
          example: 'New Token'
        pais:
          type: string
          example: 'New Token'
    MovieTheatreHallCreateRequest:
      type: object
      properties:
        name:
          type: string
          example: 'Hall Name'
        width:
          type: integer
          format: int64
          example: 20
        height:
          type: integer
          format: int64
          example: 30
    MovieTheatreHallCreateResponse:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        name:
          type: string
          example: 'Hall Name'
        width:
          type: integer
          format: int64
          example: 20
        height:
          type: integer
          format: int64
          example: 30
    MovieTheatreHallShowCreateRequest:
      type: object
      properties:
        showId:
          type: integer
          format: int64
          example: 666
        name:
          type: string
          example: 'Show name'
        timetable:
          type: integer
          format: date-time
          example: "2023-12-20T10:00:00Z"
    MovieTheatreHallShowCreateResponse:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        showId:
          type: integer
          format: int64
          example: 666
        name:
          type: string
          example: 'Show name'
        timetable:
          type: integer
          format: date-time
          example: "2023-12-20T10:00:00Z"
    LoginGoogleRequest:
      type: object
      properties:
        tokenGoogle:
          type: string
          description: The user's Google ID token.
    LoginGoogleResponse:
      type: object
      properties:
        tokenJWT:
          type: string
          example : eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQSflxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQsswc
          description: Access token.
    RegisterGoogleRequest:
      type: object
      properties:
        tokenGoogle:
          type: string
          description: The user's Google ID token.
          example: F3498F437FEH7F3JA
    RegisterGoogleResponse:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 124
        email:
          type: string
          example: LeoMessi@gmail.com
    UserProfileRequest:
      type: object
      properties:
        name:
          type: string
          example: Leo messi
        avatar:
          type: string
          example: www.imageExample.com/ndasud72363
    Movie:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        title:
          type: string
          example: 'The Godfather'
        image:
          type: string
          example: 'https://example.com/images/the_godfather.jpg'
        genre:
          type: string
          example: 'Crime, Drama'
        synopsis:
          type: string
          example: 'The aging patriarch of an organized crime dynasty transfers control of his clandestine empire to his son.'
        rating:
          type: number
          format: float
          example: 9.2
        isShowing:
          type: boolean
          example: true
        releaseDate:
          type: string
          format: date
          example: '1972-03-24'
    MovieDetail:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        title:
          type: string
          example: 'The Godfather'
        image:
          type: string
          example: 'https://example.com/images/the_godfather.jpg'
        genre:
          type: string
          example: 'Crime, Drama'
        synopsis:
          type: string
          example: 'The aging patriarch of an organized crime dynasty transfers control of his clandestine empire to his son.'
        rating:
          type: number
          format: float
          example: 9.2
        isShowing:
          type: boolean
          example: true
        releaseDate:
          type: string
          format: date
          example: '1972-03-24'
        reviews:
          type: array
          items:
            $ref: '#/components/schemas/ReviewMovie'
    MovieRequest:
      type: object
      properties:
          title:
            type: string
            example: 'Avengers: Secret Invasion'
          image:
            type: string
            example: 'https://example.com/images/avengers_secret_invasion.jpg'
          genre:
            type: string
            example: 'Action'
          synopsis:
            type: string
            example: 'The Avengers must team up with their allies to stop the Skrulls from infiltrating and taking over the Earth.'
          isShowing:
            type: boolean
            example: false
          releaseDate:
            type: string
            format: date
            example: '2023-04-28'
    ReviewMovieRequest:
      type: object
      properties:
          userId:
            type: integer
            format: int64
            example: 532
          rating:
            type: integer
            example: 7
          comment:
            type: string
            example: 'Complex, volatile, ironic and disquieting, Scorsese Goodfellas is a masterly achievement in intense observation.'
    ReviewMovie:
      type: object
      properties:
          reviewId:
            type: integer
            format: int64
            example: 52     
          userId:
            type: integer
            format: int64
            example: 532
          rating:
            type: integer
            example: 7
          comment:
            type: string
            example: 'Complex, volatile, ironic and disquieting, Scorsese Goodfellas is a masterly achievement in intense observation.'
    BookingRequest:
      type: object
      properties:  
          hallId:
            type: integer
            format: int64
            example: 52    
          date:
            type: string
            format: date
            example: '2023-05-24'
          time:
            type: string
            format: time
            example: "18:30:00" 
          numberOfSeats:
            type: integer
            example: 3
          seats:
            type: array
            items:
              type: string
              example: "A1"      
    Booking:
      type: object
      properties:
          bookingCode:
            type: string
            example: 'BAD56ER'
          movie:
            $ref: '#/components/schemas/Movie'
          hallId:
            type: integer
            format: int64
            example: 52    
          date:
            type: string
            format: date
            example: '2023-05-24'
          time:
            type: string
            format: time
            example: "18:30:00" 
          totalPrice:
            type: number
            format: float
            example: 1543.5
          numberOfSeats:
            type: integer
            example: 3
          seats:
            type: array
            items:
              type: string
              example: "A1"    
    Tag:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
      xml:
        name: tag
    ApiResponse:
      type: object
      properties:
        code:
          type: integer
          format: int32
        type:
          type: string
        message:
          type: string
      xml:
        name: '##default'
  requestBodies:
    UserArray:
      description: List of user object
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/User'
  securitySchemes:
    petstore_auth:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: https://petstore3.swagger.io/oauth/authorize
          scopes:
            write:pets: modify pets in your account
            read:pets: read your pets
    api_key:
      type: apiKey
      name: api_key
      in: header