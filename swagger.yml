openapi: 3.0.3
info:
  title: ScreenSpace - OpenAPI 3.0
  description: |-
    This is the ScreenSpace Server endpoints documentation with which the mobile application will interact with in order to perform its required functions.
  contact:
    email: testuade1@gmail.com
  version: 0.0.0
servers:
  - url: https://screenspace.swagger.io/api/v1
tags:
  - name: user
    description: Application user management
  - name: auth
    description: User access management
  - name: theatre
    description: Movie theatre management
  - name: movie
    description: Movies information
  - name: client
    description: Client interaction management
  - name: userss
    description: Application user management
  - name: store
    description: Access to Petstore orders
    externalDocs:
      description: Find out more about our store
      url: http://swagger.io
paths:
  /users:
    post:
      tags:
        - user
      summary: Create a new owner user
      description: Creates a new movie theatre owner with the email and password provided.
      operationId: createOwner
      requestBody:
        description: Created user object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewUser'
      responses:
        '201':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NewUserCreated'
        '409':
          description: User already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NewUserCreated'
        '500':
          description: Server error while processing the request
  /users/{userEmail}:
    get:
      tags:
        - user
      summary: Password Reset Token
      description: Request a password reset token.
      operationId: createResetToken
      parameters:
        - name: userEmail
          in: path
          description: Email of the user requesting a password reset
          required: true
          schema:
            type: string
            format: email
            example: user@example.com
      responses:
        '201':
          description: Reset token succesfully sent to email
        '404':
          description: User not found
        '500':
          description: Server error while processing the request
    put:
      tags:
        - user
      summary: Password Reset for a user
      description: Request a password reset.
      operationId: resetPassword
      parameters:
        - name: userEmail
          in: path
          description: Email of the user resetting the password
          required: true
          schema:
            type: string
            format: email
            example: user@example.com
      requestBody:
        description: Password reset body
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PasswordResetRequest'
      responses:
        '200':
          description: Password Reset completed
        '403':
          description: Not allowrdto perform the action
        '404':
          description: User not found
        '500':
          description: Server error while processing the request
  /auths/owners:
    post:
      tags:
        - auth
      summary: User login
      description: Owner login with the credentials provided.
      operationId: ownerLogin
      requestBody:
        description: User authentication using provided credentials
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OwnerLoginRequest'
      responses:
        '200':
          description: User succesfully retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OwnerLoginResponse'
        '400':
          description: Bad request
        '404':
          description: User not found
        '500':
          description: Server error while processing the request
    put:
      tags:
        - auth
      summary: Token refresh for provided user
      description: Refresh the token provided
      operationId: ownerRefreshToken
      requestBody:
        description: User authentication using provided credentials
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RefreshTokenRequest'
      responses:
        '200':
          description: Token refreshed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RefreshTokenResponse'
        '400':
          description: Bad request
        '404':
          description: Refresh token not found
        '500':
          description: Server error while processing the request
  /auths/owners/{ownerId}:
    delete:
      tags:
        - auth
      summary: User logout
      description: Owner logout
      operationId: ownerLogout
      parameters:
        - name: ownerId
          in: path
          description: ID of owner thats needs to be logged out
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: User successfully logged out
        '400':
          description: Bad request
        '500':
          description: Server error while processing the request
  /theatres/owners/{ownerId}:
    post:
      tags:
        - theatre
      summary: Create a new movie theatre
      description: Creates a new movie theatre for the specified owner
      operationId: theatreCreate
      parameters:
        - name: ownerId
          in: path
          description: ID of owner thats owns the movie theatre
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: Movie theatre basic information
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MovieTheatreCreateRequest'
      responses:
        '201':
          description: Movie theatre successfully created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MovieTheatreCreateResponse'
        '400':
          description: Bad request
        '500':
          description: Server error while processing the request
  /theatres/{theatreId}/halls:
    post:
      tags:
        - theatre
      summary: Create a new movie theatre
      description: Creates a new hall for a movie theatre
      operationId: theatreHallCreate
      parameters:
        - name: theatreId
          in: path
          description: ID of theatre that contains the hall
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: Hall details
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MovieTheatreHallCreateRequest'
      responses:
        '201':
          description: Movie theatre hall successfully created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MovieTheatreHallCreateResponse'
        '400':
          description: Bad request
        '500':
          description: Server error while processing the request
  /theatres/{theatreId}/halls/{hallId}/shows:
    post:
      tags:
        - theatre
      summary: Create a show in a movie hall
      description: Creates a new show for specified hall
      operationId: theatreHallShowCreate
      parameters:
        - name: theatreId
          in: path
          description: ID of theatre that contains the hall
          required: true
          schema:
            type: integer
            format: int64
        - name: hallId
          in: path
          description: ID of theatre that contains the hall
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: Hall details
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MovieTheatreHallShowCreateRequest'
      responses:
        '201':
          description: Movie theatre hall successfully created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MovieTheatreHallShowCreateResponse'
        '400':
          description: Bad request
        '500':
          description: Server error while processing the request
  /shows/{showId}:
    get:
      tags:
        - theatre
      summary: Retrieve status details for a specified show
      description: Retrieve status details for a specified show
      operationId: getShowDetails
      parameters:
        - name: showId
          in: path
          description: ID of theatre that contains the hall
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Show status details retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ShowStatusDetails'
        '400':
          description: Bad request
        '500':
          description: Server error while processing the request
  /movies/{latitude}/{longitude}:
    get:
      tags:
        - movie
      summary: Obtain all available movies by location
      description: Retrieves all movies available in nearby locations
      operationId: getAllMoviesByLocationAndFilters
      parameters:
        - name: latitude
          in: path
          description: Latitude of the user
          required: true
          schema:
            type: integer
            format: int64
        - name: longitude
          in: path
          description: Longitude of the user
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: All available movies in nearby locations
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MovieDetails'
        '400':
          description: Bad request
        '500':
          description: Server error while processing the request
  /clients/{clientEmail}:
    post:
      tags:
        - client
      summary: Make a reservation for a movie show
      description: Creates a new reservation for a client for a specified movie
      operationId: clientReservationCreate
      parameters:
        - name: clientEmail
          in: path
          description: Email of the user requesting the reservation
          required: true
          schema:
            type: string
            format: email
            example: user@example.com
      requestBody:
        description: ReservationDetails
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReservationDetailsRequest'
      responses:
        '201':
          description: Movie theatre hall successfully created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReservationDetailsResponse'
        '400':
          description: Bad request
        '500':
          description: Server error while processing the request
  /user/createWithList:
    post:
      tags:
        - userss
      summary: Creates list of users with given input array
      description: Creates list of users with given input array
      operationId: createUsersWithListInput
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/User'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'          
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
        default:
          description: successful operation
  /user/login:
    get:
      tags:
        - userss
      summary: Logs user into the system
      description: ''
      operationId: loginUser
      parameters:
        - name: username
          in: query
          description: The user name for login
          required: false
          schema:
            type: string
        - name: password
          in: query
          description: The password for login in clear text
          required: false
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          headers:
            X-Rate-Limit:
              description: calls per hour allowed by the user
              schema:
                type: integer
                format: int32
            X-Expires-After:
              description: date in UTC when token expires
              schema:
                type: string
                format: date-time
          content:
            application/xml:
              schema:
                type: string
            application/json:
              schema:
                type: string
        '400':
          description: Invalid username/password supplied
  /user/logout:
    get:
      tags:
        - userss
      summary: Logs out current logged in user session
      description: ''
      operationId: logoutUser
      parameters: []
      responses:
        default:
          description: successful operation
  /user/{username}:
    get:
      tags:
        - userss
      summary: Get user by user name
      description: ''
      operationId: getUserByName
      parameters:
        - name: username
          in: path
          description: 'The name that needs to be fetched. Use user1 for testing. '
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'          
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid username supplied
        '404':
          description: User not found
    put:
      tags:
        - userss
      summary: Update user
      description: This can only be done by the logged in user.
      operationId: updateUser
      parameters:
        - name: username
          in: path
          description: name that need to be deleted
          required: true
          schema:
            type: string
      requestBody:
        description: Update an existent user in the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          application/xml:
            schema:
              $ref: '#/components/schemas/User'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        default:
          description: successful operation
    delete:
      tags:
        - userss
      summary: Delete user
      description: This can only be done by the logged in user.
      operationId: deleteUser
      parameters:
        - name: username
          in: path
          description: The name that needs to be deleted
          required: true
          schema:
            type: string
      responses:
        '400':
          description: Invalid username supplied
        '404':
          description: User not found
  /v1/userss:
    put:
      tags:
        - pet
      summary: Update an existing pet
      description: Update an existing pet by Id
      operationId: updatePet
      requestBody:
        description: Update an existent pet in the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Pet'
          application/xml:
            schema:
              $ref: '#/components/schemas/Pet'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Pet'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pet'          
            application/xml:
              schema:
                $ref: '#/components/schemas/Pet'
        '400':
          description: Invalid ID supplied
        '404':
          description: Pet not found
        '405':
          description: Validation exception
      security:
        - petstore_auth:
            - write:pets
            - read:pets
    post:
      tags:
        - pet
      summary: Add a new pet to the store
      description: Add a new pet to the store
      operationId: addPet
      requestBody:
        description: Create a new pet in the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Pet'
          application/xml:
            schema:
              $ref: '#/components/schemas/Pet'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Pet'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pet'          
            application/xml:
              schema:
                $ref: '#/components/schemas/Pet'
        '405':
          description: Invalid input
      security:
        - petstore_auth:
            - write:pets
            - read:pets
  /pet/findByStatus:
    get:
      tags:
        - pet
      summary: Finds Pets by status
      description: Multiple status values can be provided with comma separated strings
      operationId: findPetsByStatus
      parameters:
        - name: status
          in: query
          description: Status values that need to be considered for filter
          required: false
          explode: true
          schema:
            type: string
            default: available
            enum:
              - available
              - pending
              - sold
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Pet'          
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Pet'
        '400':
          description: Invalid status value
      security:
        - petstore_auth:
            - write:pets
            - read:pets
  /pet/findByTags:
    get:
      tags:
        - pet
      summary: Finds Pets by tags
      description: Multiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.
      operationId: findPetsByTags
      parameters:
        - name: tags
          in: query
          description: Tags to filter by
          required: false
          explode: true
          schema:
            type: array
            items:
              type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Pet'          
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Pet'
        '400':
          description: Invalid tag value
      security:
        - petstore_auth:
            - write:pets
            - read:pets
  /pet/{petId}:
    get:
      tags:
        - pet
      summary: Find pet by ID
      description: Returns a single pet
      operationId: getPetById
      parameters:
        - name: petId
          in: path
          description: ID of pet to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pet'          
            application/xml:
              schema:
                $ref: '#/components/schemas/Pet'
        '400':
          description: Invalid ID supplied
        '404':
          description: Pet not found
      security:
        - api_key: []
        - petstore_auth:
            - write:pets
            - read:pets
    post:
      tags:
        - pet
      summary: Updates a pet in the store with form data
      description: ''
      operationId: updatePetWithForm
      parameters:
        - name: petId
          in: path
          description: ID of pet that needs to be updated
          required: true
          schema:
            type: integer
            format: int64
        - name: name
          in: query
          description: Name of pet that needs to be updated
          schema:
            type: string
        - name: status
          in: query
          description: Status of pet that needs to be updated
          schema:
            type: string
      responses:
        '405':
          description: Invalid input
      security:
        - petstore_auth:
            - write:pets
            - read:pets
    delete:
      tags:
        - pet
      summary: Deletes a pet
      description: delete a pet
      operationId: deletePet
      parameters:
        - name: api_key
          in: header
          description: ''
          required: false
          schema:
            type: string
        - name: petId
          in: path
          description: Pet id to delete
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '400':
          description: Invalid pet value
      security:
        - petstore_auth:
            - write:pets
            - read:pets
  /pet/{petId}/uploadImage:
    post:
      tags:
        - pet
      summary: uploads an image
      description: ''
      operationId: uploadFile
      parameters:
        - name: petId
          in: path
          description: ID of pet to update
          required: true
          schema:
            type: integer
            format: int64
        - name: additionalMetadata
          in: query
          description: Additional Metadata
          required: false
          schema:
            type: string
      requestBody:
        content:
          application/octet-stream:
            schema:
              type: string
              format: binary
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
      security:
        - petstore_auth:
            - write:pets
            - read:pets
  /store/inventory:
    get:
      tags:
        - store
      summary: Returns pet inventories by status
      description: Returns a map of status codes to quantities
      operationId: getInventory
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  type: integer
                  format: int32
      security:
        - api_key: []
  /store/order:
    post:
      tags:
        - store
      summary: Place an order for a pet
      description: Place a new order in the store
      operationId: placeOrder
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Order'
          application/xml:
            schema:
              $ref: '#/components/schemas/Order'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Order'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '405':
          description: Invalid input
  /store/order/{orderId}:
    get:
      tags:
        - store
      summary: Find purchase order by ID
      description: For valid response try integer IDs with value <= 5 or > 10. Other values will generate exceptions.
      operationId: getOrderById
      parameters:
        - name: orderId
          in: path
          description: ID of order that needs to be fetched
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'          
            application/xml:
              schema:
                $ref: '#/components/schemas/Order'
        '400':
          description: Invalid ID supplied
        '404':
          description: Order not found
    delete:
      tags:
        - store
      summary: Delete purchase order by ID
      description: For valid response try integer IDs with value < 1000. Anything above 1000 or nonintegers will generate API errors
      operationId: deleteOrder
      parameters:
        - name: orderId
          in: path
          description: ID of the order that needs to be deleted
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '400':
          description: Invalid ID supplied
        '404':
          description: Order not found
components:
  schemas:
    Order:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        petId:
          type: integer
          format: int64
          example: 198772
        quantity:
          type: integer
          format: int32
          example: 7
        shipDate:
          type: string
          format: date-time
        status:
          type: string
          description: Order Status
          example: approved
          enum:
            - placed
            - approved
            - delivered
        complete:
          type: boolean
      xml:
        name: order
    Customer:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 100000
        username:
          type: string
          example: fehguy
        address:
          type: array
          xml:
            name: addresses
            wrapped: true
          items:
            $ref: '#/components/schemas/Address'
      xml:
        name: customer
    Address:
      type: object
      properties:
        street:
          type: string
          example: 437 Lytton
        city:
          type: string
          example: Palo Alto
        state:
          type: string
          example: CA
        zip:
          type: string
          example: '94301'
      xml:
        name: address
    Category:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        name:
          type: string
          example: Dogs
      xml:
        name: category
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        username:
          type: string
          example: theUser
        firstName:
          type: string
          example: John
        lastName:
          type: string
          example: James
        email:
          type: string
          example: john@email.com
        password:
          type: string
          example: '12345'
        phone:
          type: string
          example: '12345'
        userStatus:
          type: integer
          description: User Status
          format: int32
          example: 1
      xml:
        name: user
    NewUser:
      type: object
      properties:
        email:
          type: string
          example: john@email.com
        password:
          type: string
          example: '12345'
    NewUserCreated:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        email:
          type: string
          format: email
          example: john@email.com
        password:
          type: string
          example: '12345'
    PasswordResetRequest:
      type: object
      properties:
        newPassword:
          type: string
          example: '12345'
        resetToken:
          type: string
          example: '12345'
    OwnerLoginRequest:
      type: object
      properties:
        email:
          type: string
          example: john@email.com
        password:
          type: string
          example: '12345'
    OwnerLoginResponse:
      type: object
      properties:
        email:
          type: string
          example: john@email.com
        password:
          type: string
          example: '12345'
    RefreshTokenRequest:
      type: object
      properties:
        refreshToken:
          type: string
          example: 'Refresh token'
    RefreshTokenResponse:
      type: object
      properties:
        refreshToken:
          type: string
          example: 'sdasdasdasd'
        token:
          type: string
          example: 'New Token'
    MovieTheatreCreateRequest:
      type: object
      properties:
        name:
          type: string
          example: 'Cinemark Belgrano'
        calle:
          type: string
          example: 'New Token'
        numero:
          type: integer
          format: int64
          example: 10
        barrio:
          type: string
          example: 'New Token'
        localidad:
          type: string
          example: 'New Token'
        provincia:
          type: string
          example: 'New Token'
        pais:
          type: string
          example: 'New Token'
    MovieTheatreCreateResponse:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        name:
          type: string
          example: 'Cinemark Belgrano'
        calle:
          type: string
          example: 'New Token'
        numero:
          type: integer
          format: int64
          example: 10
        barrio:
          type: string
          example: 'New Token'
        localidad:
          type: string
          example: 'New Token'
        provincia:
          type: string
          example: 'New Token'
        pais:
          type: string
          example: 'New Token'
    MovieTheatreHallCreateRequest:
      type: object
      properties:
        name:
          type: string
          example: 'Hall Name'
        width:
          type: integer
          format: int64
          example: 20
        height:
          type: integer
          format: int64
          example: 30
    MovieTheatreHallCreateResponse:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        name:
          type: string
          example: 'Hall Name'
        width:
          type: integer
          format: int64
          example: 20
        height:
          type: integer
          format: int64
          example: 30
    MovieTheatreHallShowCreateRequest:
      type: object
      properties:
        showId:
          type: integer
          format: int64
          example: 666
        name:
          type: string
          example: 'Show name'
        timetable:
          type: integer
          format: date-time
          example: "2023-12-20T10:00:00Z"
    MovieTheatreHallShowCreateResponse:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        showId:
          type: integer
          format: int64
          example: 666
        name:
          type: string
          example: 'Show name'
        timetable:
          type: integer
          format: date-time
          example: "2023-12-20T10:00:00Z"
    ShowStatusDetails:
      type: object
      properties:
        availableSeats:
          type: array
          items:
            type: object
            properties:
              file:
                type: string
                example: A
              column:
                type: integer
                format: int64
                example: 1
    MovieDetails:
      type: array
      items:
        type: object
        properties:
          name:
            type: string
            description: Theatre name
            example: "Cinemax"
          distance:
            type: integer
            description: Theathre distance from user (in km)
            example: 64
          halls:
            type: array
            items:
              type: object
              properties:
                hallId:
                  type: integer
                  description: HallId
                  example: 1
                show:
                  type: array
                  items:
                    type: object
                    properties:
                      showId:
                        type: integer
                        description: showId
                        example: 2
                      timetable:
                        type: integer
                        format: date-time
                        example: "2023-12-20T10:00:00Z"
                      movie:
                        type: object
                        properties:
                          name: 
                            type: string
                            description: Movie Name
                            example: "Avatar 2"
                          calification:
                            type: integer
                            format: int64
                            description: Movie calification
                            example: 4.5
                          genres:
                            type: array
                            items:
                              type: string
                              example: "Ciencia Ficcion"
                            
    ReservationDetailsRequest:
      type: object
      properties:
        theatreId:
          type: integer
          format: int64
          example: 1
        hallId:
          type: integer
          format: int64
          example: 2
        showId:
          type: integer
          format: int64
          example: 3
        seats:
          type: array
          items:
            type: object
            properties:
              file:
                type: string
                description: File of the seat
                example: "A"
              column:
                type: integer
                format: int64
                example: 3
    ReservationDetailsResponse:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        showId:
          type: integer
          format: int64
          example: 666
        name:
          type: string
          example: 'Show name'
        timetable:
          type: integer
          format: date-time
          example: "2023-12-20T10:00:00Z"
    Tag:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
      xml:
        name: tag
    Pet:
      required:
        - name
        - photoUrls
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        name:
          type: string
          example: doggie
        category:
          $ref: '#/components/schemas/Category'
        photoUrls:
          type: array
          xml:
            wrapped: true
          items:
            type: string
            xml:
              name: photoUrl
        tags:
          type: array
          xml:
            wrapped: true
          items:
            $ref: '#/components/schemas/Tag'
        status:
          type: string
          description: pet status in the store
          enum:
            - available
            - pending
            - sold
      xml:
        name: pet
    ApiResponse:
      type: object
      properties:
        code:
          type: integer
          format: int32
        type:
          type: string
        message:
          type: string
      xml:
        name: '##default'
  requestBodies:
    Pet:
      description: Pet object that needs to be added to the store
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Pet'
        application/xml:
          schema:
            $ref: '#/components/schemas/Pet'
    UserArray:
      description: List of user object
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/User'
  securitySchemes:
    petstore_auth:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: https://petstore3.swagger.io/oauth/authorize
          scopes:
            write:pets: modify pets in your account
            read:pets: read your pets
    api_key:
      type: apiKey
      name: api_key
      in: header